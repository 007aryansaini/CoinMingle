/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CoinMingleRouterInterface extends utils.Interface {
  functions: {
    "CoinMingleImplementation()": FunctionFragment;
    "WrappedFTM()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityFTM(address,uint256,address,uint256)": FunctionFragment;
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "getAmountOut(uint256,address[])": FunctionFragment;
    "getAmountsOutForLiquidity(uint256,address,address)": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getTokenInFor(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLiquidity(address,address,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityFTM(address,uint256,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swapFTMForTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForFTM(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CoinMingleImplementation"
      | "WrappedFTM"
      | "addLiquidity"
      | "addLiquidityFTM"
      | "allPairs"
      | "allPairsLength"
      | "createPair"
      | "getAmountOut"
      | "getAmountsOutForLiquidity"
      | "getPair"
      | "getTokenInFor"
      | "owner"
      | "removeLiquidity"
      | "removeLiquidityFTM"
      | "renounceOwnership"
      | "swapFTMForTokens"
      | "swapTokensForFTM"
      | "swapTokensForTokens"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CoinMingleImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WrappedFTM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityFTM",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOutForLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityFTM",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFTMForTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForFTM",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CoinMingleImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WrappedFTM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityFTM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOutForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityFTM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFTMForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForFTM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityAdded(uint256,uint256,address)": EventFragment;
    "LiquidityRemoved(uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PairCreated(address,address,address)": EventFragment;
    "TokensSwapped(address,address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSwapped"): EventFragment;
}

export interface LiquidityAddedEventObject {
  amountA: BigNumber;
  amountB: BigNumber;
  pair: string;
}
export type LiquidityAddedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LiquidityRemovedEventObject {
  amountA: BigNumber;
  amountB: BigNumber;
  pair: string;
}
export type LiquidityRemovedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  LiquidityRemovedEventObject
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PairCreatedEventObject {
  tokenA: string;
  tokenB: string;
  pair: string;
}
export type PairCreatedEvent = TypedEvent<
  [string, string, string],
  PairCreatedEventObject
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface TokensSwappedEventObject {
  _to: string;
  tokenIN: string;
  tokenInAmount: BigNumber;
  tokenOut: string;
  tokenOutAmount: BigNumber;
}
export type TokensSwappedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  TokensSwappedEventObject
>;

export type TokensSwappedEventFilter = TypedEventFilter<TokensSwappedEvent>;

export interface CoinMingleRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoinMingleRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CoinMingleImplementation(overrides?: CallOverrides): Promise<[string]>;

    WrappedFTM(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidityFTM(
      _token: PromiseOrValue<string>,
      _amountDesired: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountOut: BigNumber }>;

    getAmountsOutForLiquidity(
      _liquidity: PromiseOrValue<BigNumberish>,
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _amountA: BigNumber; _amountB: BigNumber }
    >;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenInFor(
      _tokenInAddress: PromiseOrValue<string>,
      _tokenOutAddress: PromiseOrValue<string>,
      _tokenInAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenOutAmount: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityFTM(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapFTMForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForFTM(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CoinMingleImplementation(overrides?: CallOverrides): Promise<string>;

  WrappedFTM(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    _amountADesired: PromiseOrValue<BigNumberish>,
    _amountBDesired: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidityFTM(
    _token: PromiseOrValue<string>,
    _amountDesired: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allPairs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountOut(
    _amountIn: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsOutForLiquidity(
    _liquidity: PromiseOrValue<BigNumberish>,
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _amountA: BigNumber; _amountB: BigNumber }
  >;

  getPair(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenInFor(
    _tokenInAddress: PromiseOrValue<string>,
    _tokenOutAddress: PromiseOrValue<string>,
    _tokenInAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityFTM(
    _token: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapFTMForTokens(
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForFTM(
    _amountIn: PromiseOrValue<BigNumberish>,
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForTokens(
    _amountIn: PromiseOrValue<BigNumberish>,
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CoinMingleImplementation(overrides?: CallOverrides): Promise<string>;

    WrappedFTM(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    addLiquidityFTM(
      _token: PromiseOrValue<string>,
      _amountDesired: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToken: BigNumber;
        amountFTM: BigNumber;
        liquidity: BigNumber;
      }
    >;

    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOutForLiquidity(
      _liquidity: PromiseOrValue<BigNumberish>,
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _amountA: BigNumber; _amountB: BigNumber }
    >;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenInFor(
      _tokenInAddress: PromiseOrValue<string>,
      _tokenOutAddress: PromiseOrValue<string>,
      _tokenInAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    removeLiquidityFTM(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountToken: BigNumber; amountFTM: BigNumber }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swapFTMForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokensForFTM(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LiquidityAdded(uint256,uint256,address)"(
      amountA?: PromiseOrValue<BigNumberish> | null,
      amountB?: PromiseOrValue<BigNumberish> | null,
      pair?: PromiseOrValue<string> | null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      amountA?: PromiseOrValue<BigNumberish> | null,
      amountB?: PromiseOrValue<BigNumberish> | null,
      pair?: PromiseOrValue<string> | null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(uint256,uint256,address)"(
      amountA?: PromiseOrValue<BigNumberish> | null,
      amountB?: PromiseOrValue<BigNumberish> | null,
      pair?: PromiseOrValue<string> | null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      amountA?: PromiseOrValue<BigNumberish> | null,
      amountB?: PromiseOrValue<BigNumberish> | null,
      pair?: PromiseOrValue<string> | null
    ): LiquidityRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PairCreated(address,address,address)"(
      tokenA?: PromiseOrValue<string> | null,
      tokenB?: PromiseOrValue<string> | null,
      pair?: PromiseOrValue<string> | null
    ): PairCreatedEventFilter;
    PairCreated(
      tokenA?: PromiseOrValue<string> | null,
      tokenB?: PromiseOrValue<string> | null,
      pair?: PromiseOrValue<string> | null
    ): PairCreatedEventFilter;

    "TokensSwapped(address,address,uint256,address,uint256)"(
      _to?: PromiseOrValue<string> | null,
      tokenIN?: PromiseOrValue<string> | null,
      tokenInAmount?: null,
      tokenOut?: PromiseOrValue<string> | null,
      tokenOutAmount?: null
    ): TokensSwappedEventFilter;
    TokensSwapped(
      _to?: PromiseOrValue<string> | null,
      tokenIN?: PromiseOrValue<string> | null,
      tokenInAmount?: null,
      tokenOut?: PromiseOrValue<string> | null,
      tokenOutAmount?: null
    ): TokensSwappedEventFilter;
  };

  estimateGas: {
    CoinMingleImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    WrappedFTM(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidityFTM(
      _token: PromiseOrValue<string>,
      _amountDesired: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOutForLiquidity(
      _liquidity: PromiseOrValue<BigNumberish>,
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInFor(
      _tokenInAddress: PromiseOrValue<string>,
      _tokenOutAddress: PromiseOrValue<string>,
      _tokenInAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidityFTM(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapFTMForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForFTM(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CoinMingleImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WrappedFTM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityFTM(
      _token: PromiseOrValue<string>,
      _amountDesired: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOutForLiquidity(
      _liquidity: PromiseOrValue<BigNumberish>,
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInFor(
      _tokenInAddress: PromiseOrValue<string>,
      _tokenOutAddress: PromiseOrValue<string>,
      _tokenInAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityFTM(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapFTMForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForFTM(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

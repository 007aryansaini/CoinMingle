/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CoinMingleLP,
  CoinMingleLPInterface,
} from "../../contracts/CoinMingleLP";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AccessForbidden",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientLiquidity",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientTokenBalanceToTransfer",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "CoinMingleRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "K",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "uint256",
        name: "_amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountB",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenA",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenB",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6117f1806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063485cc955116100b857806395d89b411161007c57806395d89b41146102a8578063a457c2d7146102b0578063a9059cbb146102c3578063a932492f146102d6578063ca706bcf146102df578063dd62ed3e146102f257600080fd5b8063485cc955146102315780635f64b55b146102465780636a6278421461025957806370a082311461026c57806389afcb441461029557600080fd5b806318160ddd116100ff57806318160ddd146101e157806323b872dd146101e9578063313ce567146101fc578063395093511461020b5780633aeb49021461021e57600080fd5b806303438dd01461013c57806306fdde03146101625780630902f1ac14610177578063095ea7b3146101935780630fc63d10146101b6575b600080fd5b61014f61014a36600461156a565b610305565b6040519081526020015b60405180910390f35b61016a610605565b604051610159919061158c565b6068546069545b60408051928352602083019190915201610159565b6101a66101a13660046115e1565b610697565b6040519015158152602001610159565b6066546101c9906001600160a01b031681565b6040516001600160a01b039091168152602001610159565b60355461014f565b6101a66101f736600461160b565b6106af565b60405160128152602001610159565b6101a66102193660046115e1565b6106d3565b6065546101c9906001600160a01b031681565b61024461023f366004611647565b6106f5565b005b6067546101c9906001600160a01b031681565b61014f61026736600461156a565b6108e6565b61014f61027a36600461156a565b6001600160a01b031660009081526033602052604090205490565b61017e6102a336600461156a565b610ab5565b61016a610cbb565b6101a66102be3660046115e1565b610cca565b6101a66102d13660046115e1565b610d45565b61014f606a5481565b61014f6102ed3660046115e1565b610d53565b61014f610300366004611647565b610e62565b6065546000906001600160a01b0316331461033357604051631decfebb60e31b815260040160405180910390fd5b6066546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561037c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a0919061167a565b6067546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610412919061167a565b90506000806104246068546069549091565b915091506000808386111561044d5750506066546067546001600160a01b039182169116610463565b50506067546066546001600160a01b0391821691165b6066546000906001600160a01b03848116911614156105035761048685886116a9565b60665490915061049f906001600160a01b031682610d53565b97508715806104af575060695488145b156104cd5760405163bb55fd2760e01b815260040160405180910390fd5b87606960008282546104df91906116a9565b9250508190555080606860008282546104f891906116c0565b909155506105859050565b61050d84876116a9565b606754909150610526906001600160a01b031682610d53565b9750871580610536575060685488145b156105545760405163bb55fd2760e01b815260040160405180910390fd5b876068600082825461056691906116a9565b92505081905550806069600082825461057f91906116c0565b90915550505b60405163a9059cbb60e01b81526001600160a01b038a81166004830152602482018a905283169063a9059cbb906044016020604051808303816000875af11580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f891906116d8565b5050505050505050919050565b606060368054610614906116fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610640906116fa565b801561068d5780601f106106625761010080835404028352916020019161068d565b820191906000526020600020905b81548152906001019060200180831161067057829003601f168201915b5050505050905090565b6000336106a5818585610e8d565b5060019392505050565b6000336106bd858285610fb1565b6106c885858561102b565b506001949350505050565b6000336106a58185856106e68383610e62565b6106f091906116c0565b610e8d565b600054610100900460ff16158080156107155750600054600160ff909116105b8061072f5750303b15801561072f575060005460ff166001145b6107975760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156107ba576000805461ff0019166101001790555b6001600160a01b03831615806107d757506001600160a01b038216155b156107f55760405163e6c4247b60e01b815260040160405180910390fd5b6108506040518060400160405280601d81526020017f436f696e4d696e676c65204c69717569646974792050726f7669646572000000815250604051806040016040528060048152602001630434d4c560e41b8152506111d6565b606580546001600160a01b03199081163317909155606680546001600160a01b03868116918416919091179091556067805491851691909216179055606b805461ffff19166103e817905580156108e1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6065546000906001600160a01b0316331461091457604051631decfebb60e31b815260040160405180910390fd5b6066546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610981919061167a565b6067546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f3919061167a565b9050600060685483610a0591906116a9565b9050600060695483610a1791906116a9565b90506000610a2460355490565b90506000610a32838561172f565b9050610a3d8161120b565b965081610a6a57606b54610a559061ffff16886116a9565b606b54909750610a6a90309061ffff1661127b565b86610a885760405163bb55fd2760e01b815260040160405180910390fd5b610a92888861127b565b60688690556069859055610aa6858761172f565b606a5550949695505050505050565b60655460009081906001600160a01b03163314610ae557604051631decfebb60e31b815260040160405180910390fd5b606b5430600090815260336020526040812054909161ffff1690610b0991906116a9565b90506000610b1660355490565b90508060685483610b27919061172f565b610b31919061174e565b93508060695483610b42919061172f565b610b4c919061174e565b9250831580610b59575082155b15610b7757604051630ded55d160e31b815260040160405180910390fd5b610b81308361133c565b8360686000828254610b9391906116a9565b925050819055508260696000828254610bac91906116a9565b9091555050606954606854610bc1919061172f565b606a5560665460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af1158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906116d8565b5060675460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af1158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb391906116d8565b505050915091565b606060378054610614906116fa565b60003381610cd88286610e62565b905083811015610d385760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161078e565b6106c88286868403610e8d565b6000336106a581858561102b565b6066546000906001600160a01b03848116911614801590610d8257506067546001600160a01b03848116911614155b15610da05760405163e6c4247b60e01b815260040160405180910390fd5b600080610db06068546069549091565b909250905060006103e8610dc586600361172f565b610dcf919061174e565b90506000610ddd82876116a9565b6066549091506001600160a01b0388811691161415610e29576000610e0282866116c0565b9050600081606a54610e14919061174e565b9050610e2081866116a9565b96505050610e58565b6000610e3582856116c0565b9050600081606a54610e47919061174e565b9050610e5381876116a9565b965050505b5050505092915050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b038316610eef5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161078e565b6001600160a01b038216610f505760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161078e565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610fbd8484610e62565b9050600019811461102557818110156110185760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161078e565b6110258484848403610e8d565b50505050565b6001600160a01b03831661108f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161078e565b6001600160a01b0382166110f15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161078e565b6001600160a01b038316600090815260336020526040902054818110156111695760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161078e565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111c99086815260200190565b60405180910390a3611025565b600054610100900460ff166111fd5760405162461bcd60e51b815260040161078e90611770565b6112078282611470565b5050565b6000600382111561126c575080600061122560028361174e565b6112309060016116c0565b90505b818110156112665790508060028161124b818661174e565b61125591906116c0565b61125f919061174e565b9050611233565b50919050565b8115611276575060015b919050565b6001600160a01b0382166112d15760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161078e565b80603560008282546112e391906116c0565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03821661139c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161078e565b6001600160a01b038216600090815260336020526040902054818110156114105760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161078e565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600054610100900460ff166114975760405162461bcd60e51b815260040161078e90611770565b81516114aa9060369060208501906114ba565b5080516108e19060379060208401905b8280546114c6906116fa565b90600052602060002090601f0160209004810192826114e8576000855561152e565b82601f1061150157805160ff191683800117855561152e565b8280016001018555821561152e579182015b8281111561152e578251825591602001919060010190611513565b5061153a92915061153e565b5090565b5b8082111561153a576000815560010161153f565b80356001600160a01b038116811461127657600080fd5b60006020828403121561157c57600080fd5b61158582611553565b9392505050565b600060208083528351808285015260005b818110156115b95785810183015185820160400152820161159d565b818111156115cb576000604083870101525b50601f01601f1916929092016040019392505050565b600080604083850312156115f457600080fd5b6115fd83611553565b946020939093013593505050565b60008060006060848603121561162057600080fd5b61162984611553565b925061163760208501611553565b9150604084013590509250925092565b6000806040838503121561165a57600080fd5b61166383611553565b915061167160208401611553565b90509250929050565b60006020828403121561168c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156116bb576116bb611693565b500390565b600082198211156116d3576116d3611693565b500190565b6000602082840312156116ea57600080fd5b8151801515811461158557600080fd5b600181811c9082168061170e57607f821691505b6020821081141561126657634e487b7160e01b600052602260045260246000fd5b600081600019048311821515161561174957611749611693565b500290565b60008261176b57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205eca9f5d73743b045bc89ce7984b8431d1d76bcb9c29fb668a47f7a226cd04dc64736f6c634300080a0033";

type CoinMingleLPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoinMingleLPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoinMingleLP__factory extends ContractFactory {
  constructor(...args: CoinMingleLPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CoinMingleLP> {
    return super.deploy(overrides || {}) as Promise<CoinMingleLP>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoinMingleLP {
    return super.attach(address) as CoinMingleLP;
  }
  override connect(signer: Signer): CoinMingleLP__factory {
    return super.connect(signer) as CoinMingleLP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoinMingleLPInterface {
    return new utils.Interface(_abi) as CoinMingleLPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoinMingleLP {
    return new Contract(address, _abi, signerOrProvider) as CoinMingleLP;
  }
}
